{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/BrickWall/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BrickModel, WallRow } from '../models/brick.model';\nimport { lastValueFrom } from 'rxjs';\nimport { color } from '../constants/color';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/brick-type.service\";\nimport * as i2 from \"../services/brick-option.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../directives/brick.directive\";\nimport * as i6 from \"../pipes/reverse.pipe\";\n\nfunction HomeComponent_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", item_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r2.name, \" \");\n  }\n}\n\nfunction HomeComponent_div_78_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 27);\n  }\n\n  if (rf & 2) {\n    const item_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"entity\", item_r5);\n  }\n}\n\nfunction HomeComponent_div_78_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵtemplate(1, HomeComponent_div_78_div_1_Template, 1, 1, \"div\", 26);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const wallRow_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", wallRow_r3.bricks);\n  }\n}\n\nexport class HomeComponent {\n  constructor(brickTypeService, brickOptionService) {\n    this.brickTypeService = brickTypeService;\n    this.brickOptionService = brickOptionService;\n    this.wallRows = [];\n    this.brickTypes = []; //Вводные параметры в мм\n\n    this.wallHeightInputMM = 1000; //высота стены 3 метра\n\n    this.wallWidthInputMM = 3000; //длина стены 10 метров\n\n    this.brickHeightMM = 65; //высота кирпича 6,5 см\n\n    this.brickWidthMM = 250; //длина кирпича 25 см\n\n    this.jointVerticalMM = 10; //ширина веритикального шва 10 мм\n\n    this.jointHorizontalMM = 10; //ширина горизонтального шва 10 мм\n\n    this.halfBrickWidthMM = Math.floor(this.brickWidthMM / 2) - Math.floor(this.jointVerticalMM / 2); //Половина длинны кирпича\n\n    this.minBrickWidth = 30; //минимальная длина обрезка кирпича\n\n    this.brickWeight = 0; //вес кирпича\n\n    this.brickPrice = 0; //цена кирпича\n\n    this.countOnPalette = 0; //кол-во кирпичей на одной палетте\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const brickTypes$ = _this.brickTypeService.get();\n\n      _this.brickTypes = yield lastValueFrom(brickTypes$);\n      _this.selectedBrickTypeId = _this.brickTypes[0].id;\n\n      _this.updateBrickParams();\n    })();\n  } //Нарисовать стену\n\n\n  drawBrickWall() {\n    this.wallRows.length = 0;\n    const wallElement = document.getElementById('wall'); //Визуальные параметры стены в пикселях\n\n    const wallHeightScreen = wallElement === null || wallElement === void 0 ? void 0 : wallElement.offsetHeight;\n    const wallWidthScreen = wallElement === null || wallElement === void 0 ? void 0 : wallElement.offsetWidth;\n\n    if (wallWidthScreen && wallHeightScreen) {\n      //Рассчитываем количество рядов\n      let rowsCount = Math.floor(this.wallHeightInputMM / (this.brickHeightMM + this.jointHorizontalMM)); //Реальная длина стены может быть меньше, чем ввел пользователь. Например, если кирпич 250, шов 10, а пользователь указал длину стены 261\n      //В этом случае неполный кирпич должен быть длиной 1мм, что практически невозможно реализовать\n      //Поэтому берем минимильную длину обрезка равную 30мм и рассчитываем реальную длину стены\n\n      this.wallWidthFactMM = this.calculateWallWidth(); //Коээфициент для первода ширины мм в px\n\n      const widthFactor = wallWidthScreen / this.wallWidthFactMM; //Коээфициент для первода высоты мм в px\n\n      const heightFactor = wallHeightScreen / this.wallWidthInputMM; //Ширина одного кирпича в пикселях\n\n      const brickWidthPX = Math.floor(this.brickWidthMM * widthFactor); //Ширина шва в пикселях. Может быть 0, если стена слишком широкая\n\n      const jointVerticalPX = Math.floor(this.jointVerticalMM * widthFactor); //Ширина стены в px\n\n      let wallWidthPX = this.wallWidthFactMM * widthFactor; //Высота одного кирпича в пикселях\n\n      const brickHeightPX = Math.floor(this.brickHeightMM * widthFactor); //Высота шва в пикселях\n\n      const jointHorizontalPX = Math.floor(this.jointHorizontalMM * widthFactor); //Высота стены в px\n\n      let wallHeightPX = this.wallWidthInputMM * widthFactor; //Высота стены в мм\n\n      this.wallHeightFactMM = rowsCount * this.brickHeightMM + rowsCount * this.jointHorizontalMM; //Ширина первого ряда в px. Будем выравнивать четные ряды по этому значению\n\n      let firstRowWidthPX = 0;\n      let firstRowWidthMM = 0; //Цикл по количеству рядов стены\n\n      for (let rowNum = 1; rowNum <= rowsCount; rowNum++) {\n        let isEvenRow = rowNum % 2 == 0;\n        let brickNum = 0;\n        let laidOutPX = 0; //Сколько уложено кирпичей и швов в пикселях\n\n        let laidOutMM = 0; //Сколько уложено кирпичей и швов в мм\n\n        let wallRow = new WallRow(); //ЛЕВАЯ ЧАСТЬ. Для четных рядов первым идет половина кирпича\n\n        if (isEvenRow) {\n          let brick = new BrickModel();\n          brick.heightPX = brickHeightPX;\n          brick.widthPX = Math.floor(this.halfBrickWidthMM * widthFactor);\n          brick.widthMM = this.halfBrickWidthMM;\n          brick.marginLeft = 0;\n          brick.marginBottom = jointHorizontalPX;\n          brick.backgroundColor = color.red;\n          wallRow.bricks.push(brick);\n          brickNum++;\n          laidOutPX += brick.widthPX;\n          laidOutMM += this.halfBrickWidthMM;\n        } //ЦЕНТР. Количество целых кирпичей для одного ряда с учетом швов между кирпичами\n\n\n        let bricksOnRowCount = isEvenRow ? Math.floor((this.wallWidthFactMM - this.halfBrickWidthMM) / (this.brickWidthMM + this.jointVerticalMM)) : Math.floor((this.wallWidthFactMM + this.jointVerticalMM) / (this.brickWidthMM + this.jointVerticalMM));\n\n        for (let i = 0; i < bricksOnRowCount; i++) {\n          let brick = new BrickModel();\n          brick.heightPX = brickHeightPX;\n          brick.widthPX = brickWidthPX;\n          brick.widthMM = this.brickWidthMM;\n          brick.marginLeft = wallRow.bricks.length == 0 ? 0 : jointVerticalPX;\n          brick.marginBottom = jointHorizontalPX;\n          brick.backgroundColor = brickNum % 2 == 0 ? color.red : color.yellow;\n          wallRow.bricks.push(brick);\n          brickNum++;\n          laidOutPX += brick.widthPX + brick.marginLeft;\n          laidOutMM += this.brickWidthMM + this.jointVerticalMM; //Если это последний блок и не будет неполного кирпича, то подкорректируем ширину\n\n          if (i == bricksOnRowCount - 1 && this.wallWidthFactMM - laidOutMM == 0) {\n            brick.widthPX += firstRowWidthPX - laidOutPX;\n          }\n        } //ПРАВАЯ ЧАСТЬ. Добавляем неполный кирпич справа\n\n\n        if (this.wallWidthFactMM - laidOutMM > 0) {\n          let widthPX = 0;\n          let widthMM = 0; //Последний в первом ряду рассчитываем как Остаток в мм * коэффициент\n\n          if (rowNum == 1) {\n            widthMM = this.wallWidthFactMM - laidOutMM - this.jointVerticalMM;\n            widthPX = widthMM * widthFactor;\n          } //Чтобы округление нас не расстраивало будем исходить из нарисованной длины первого ряда в пикселях (firstRowWidthPX)\n          else {\n            widthMM = laidOutMM ? firstRowWidthMM - laidOutMM - this.jointVerticalMM : firstRowWidthMM;\n            widthPX = laidOutPX ? firstRowWidthPX - laidOutPX - jointVerticalPX : firstRowWidthPX;\n          }\n\n          let brick = new BrickModel();\n          brick.heightPX = brickHeightPX;\n          brick.widthPX = widthPX;\n          brick.widthMM = widthMM;\n          brick.marginLeft = jointVerticalPX;\n          brick.marginBottom = jointHorizontalPX;\n          brick.backgroundColor = brickNum % 2 == 0 ? color.red : color.yellow;\n          wallRow.bricks.push(brick);\n          laidOutPX += brick.widthPX + brick.marginLeft;\n          laidOutMM += brick.widthMM + this.jointVerticalMM;\n        } //Запоминаем ширину первого ряда в пикселях, чтобы последний неполный кирпич в четных рядах корректировать по этой длинне (борьба с округлением)\n\n\n        if (rowNum == 1) {\n          firstRowWidthPX = laidOutPX;\n          firstRowWidthMM = laidOutMM;\n        }\n\n        this.wallRows.push(wallRow);\n      }\n    } //Пересчитываем результаты\n\n\n    this.updateTotalResults();\n  } //Расчет реальной длины стены. Может быть равна или меньше, чем значение, которое указал пользователь\n\n\n  calculateWallWidth() {\n    //Количество целых кирпичей для одного ряда с учетом швов между кирпичами. Считаем по первому ряду, где первым идет полный кирпич\n    let bricksOnRowCountODD = Math.floor((this.wallWidthInputMM + this.jointVerticalMM) / (this.brickWidthMM + this.jointVerticalMM)); //Длина стены в мм. Она либо равна, либо чуть меньше заданной пользователем ширины стены\n\n    let wallWidthODD = (this.brickWidthMM + this.jointVerticalMM) * bricksOnRowCountODD - this.jointVerticalMM; //Рассчитаем остаток (неполный кирпич) у проверим: если он меньше допустимой длинны, то уменьшим длину стены\n\n    const partialBrickWidthODD = this.wallWidthInputMM - wallWidthODD - this.jointVerticalMM;\n\n    if (partialBrickWidthODD < this.minBrickWidth || partialBrickWidthODD <= 0) {\n      //Остаток меньше нормы. Возвращаем рассчитанное значение длины стены\n      return wallWidthODD;\n    } else {\n      let bricksOnRowCountEVEN = Math.floor((this.wallWidthInputMM - this.halfBrickWidthMM) / (this.brickWidthMM + this.jointVerticalMM));\n      let wallWidthEVEN = (this.brickWidthMM + this.jointVerticalMM) * bricksOnRowCountEVEN + this.halfBrickWidthMM;\n      const partialBrickWidthEVEN = this.wallWidthInputMM - wallWidthEVEN - this.jointVerticalMM;\n\n      if (partialBrickWidthEVEN < this.minBrickWidth || partialBrickWidthEVEN <= 0) {\n        //Остаток меньше нормы. Возвращаем рассчитанное значение длины стены\n        return wallWidthEVEN;\n      } else {\n        //Остаток в норме. Возвращаем исходную длину стены, которую указал пользователь\n        return this.wallWidthInputMM;\n      }\n    }\n  } //При изменеии типа кирпича получим с сервера данные по выбранному кирпичу\n\n\n  brickTypeChanged() {\n    this.updateBrickParams();\n  } //Получаем параметры выбранного типа кирпича с сервера\n\n\n  updateBrickParams() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const brickOption$ = _this2.brickOptionService.get(_this2.selectedBrickTypeId);\n\n      _this2.brickOption = yield lastValueFrom(brickOption$);\n      _this2.brickHeightMM = _this2.brickOption.height;\n      _this2.brickWidthMM = _this2.brickOption.width;\n      _this2.brickWeight = _this2.brickOption.weight;\n      _this2.brickPrice = _this2.brickOption.price;\n      _this2.countOnPalette = _this2.brickOption.countOnPalette;\n      _this2.halfBrickWidthMM = Math.floor(_this2.brickWidthMM / 2) - Math.floor(_this2.jointVerticalMM / 2);\n\n      _this2.drawBrickWall();\n    })();\n  } //Обновляем результаты после построения стены\n\n\n  updateTotalResults() {\n    this.yellowBricksCount = 0;\n    this.redBricksCount = 0; //Массивы для хранения остатов кирпичей\n\n    let partialYellowBricks = [];\n    let partialRedBricks = [];\n    this.wallRows.forEach(wallRow => {\n      wallRow.bricks.forEach(brick => {\n        //Нужен целый кирпич\n        if (brick.widthMM == this.brickWidthMM) {\n          this.redBricksCount += brick.backgroundColor == color.red ? 1 : 0;\n          this.yellowBricksCount += brick.backgroundColor == color.yellow ? 1 : 0;\n        } //Часть кирпича. Поищем в имеющихся остатках\n        else {\n          var array = brick.backgroundColor == color.red ? partialRedBricks : partialYellowBricks;\n          let partBrickIndex = array.findIndex(x => x >= brick.widthMM);\n\n          if (partBrickIndex >= 0) {\n            //Убираем из остатков\n            array.splice(partBrickIndex, 1);\n          } //В остатках нет. Берем целый кирпич, ломаем (ширина шва 0), оставшуюся часть сохраняем в массив\n          else {\n            this.redBricksCount += brick.backgroundColor == color.red ? 1 : 0;\n            this.yellowBricksCount += brick.backgroundColor == color.yellow ? 1 : 0;\n            array.push(this.brickWidthMM - brick.widthMM);\n          }\n        }\n      });\n    }); //Кол-во паллет\n\n    this.redPalletsCount = this.redBricksCount == 0 ? 0 : Math.ceil(this.redBricksCount / this.countOnPalette);\n    this.yellowPalletsCount = this.yellowBricksCount == 0 ? 0 : Math.ceil(this.yellowBricksCount / this.countOnPalette); //Общий вес\n\n    this.totalWeight = (this.redBricksCount + this.yellowBricksCount) * this.brickWeight; //Итовая цена\n\n    this.totalCost = (this.redBricksCount + this.yellowBricksCount) * this.brickPrice;\n  }\n\n}\n\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.BrickTypeService), i0.ɵɵdirectiveInject(i2.BrickOptionService));\n};\n\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 80,\n  vars: 23,\n  consts: [[1, \"d-flex\", \"h-100\"], [1, \"p-2\", \"settings\"], [1, \"header-text\"], [1, \"mb-2\"], [1, \"form-label\"], [1, \"form-select\", \"form-select-sm\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"mb-2\", \"d-flex\"], [1, \"me-2\", \"w-50\"], [1, \"input-group\", \"input-group-sm\"], [\"type\", \"number\", \"min\", \"10\", \"max\", \"4000\", \"placeholder\", \"\\u043E\\u0442 10 \\u0434\\u043E 4000 \\u043C\\u043C\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [1, \"ms-2\", \"w-50\"], [\"type\", \"number\", \"min\", \"250\", \"max\", \"10000\", \"placeholder\", \"\\u043E\\u0442 250 \\u0434\\u043E 10000 \\u043C\\u043C\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"type\", \"number\", \"min\", \"10\", \"max\", \"300\", \"placeholder\", \"\\u043E\\u0442 10 \\u0434\\u043E 300 \\u043C\\u043C\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"type\", \"number\", \"min\", \"20\", \"max\", \"400\", \"placeholder\", \"\\u043E\\u0442 20 \\u0434\\u043E 400 \\u043C\\u043C\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"type\", \"number\", \"min\", \"8\", \"max\", \"15\", \"placeholder\", \"\\u043E\\u0442 8 \\u0434\\u043E 15 \\u043C\\u043C\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [1, \"header-text\", \"pt-3\"], [1, \"d-flex\", \"justify-content-between\", \"pt-2\"], [1, \"param-name\"], [1, \"param-value\"], [1, \"p-2\", \"w-100\"], [\"id\", \"wall\", 1, \"h-100\"], [1, \"rows\"], [\"class\", \"bricks-row\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"bricks-row\"], [\"brick\", \"\", 3, \"entity\", 4, \"ngFor\", \"ngForOf\"], [\"brick\", \"\", 3, \"entity\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h4\", 2);\n      i0.ɵɵtext(3, \"\\u0412\\u0445\\u043E\\u0434\\u044F\\u0449\\u0438\\u0435 \\u043F\\u0430\\u0440\\u0430\\u043C\\u0435\\u0442\\u0440\\u044B\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"label\", 4);\n      i0.ɵɵtext(6, \"\\u0422\\u0438\\u043F \\u043A\\u0438\\u0440\\u043F\\u0438\\u0447\\u0430\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"select\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_select_ngModelChange_7_listener($event) {\n        return ctx.selectedBrickTypeId = $event;\n      })(\"change\", function HomeComponent_Template_select_change_7_listener() {\n        return ctx.brickTypeChanged();\n      });\n      i0.ɵɵtemplate(8, HomeComponent_option_8_Template, 2, 2, \"option\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\", 7)(10, \"div\", 8)(11, \"label\", 4);\n      i0.ɵɵtext(12, \"\\u0412\\u044B\\u0441\\u043E\\u0442\\u0430 \\u0441\\u0442\\u0435\\u043D\\u044B, \\u043C\\u043C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 9)(14, \"input\", 10);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_14_listener($event) {\n        return ctx.wallHeightInputMM = $event;\n      })(\"change\", function HomeComponent_Template_input_change_14_listener() {\n        return ctx.drawBrickWall();\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(15, \"div\", 11)(16, \"label\", 4);\n      i0.ɵɵtext(17, \"\\u0428\\u0438\\u0440\\u0438\\u043D\\u0430 \\u0441\\u0442\\u0435\\u043D\\u044B, \\u043C\\u043C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 9)(19, \"input\", 12);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_19_listener($event) {\n        return ctx.wallWidthInputMM = $event;\n      })(\"change\", function HomeComponent_Template_input_change_19_listener() {\n        return ctx.drawBrickWall();\n      });\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(20, \"div\", 7)(21, \"div\", 8)(22, \"label\", 4);\n      i0.ɵɵtext(23, \"\\u0412\\u044B\\u0441\\u043E\\u0442\\u0430 \\u043A\\u0438\\u0440\\u043F\\u0438\\u0447\\u0430, \\u043C\\u043C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"div\", 9)(25, \"input\", 13);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_25_listener($event) {\n        return ctx.brickHeightMM = $event;\n      })(\"change\", function HomeComponent_Template_input_change_25_listener() {\n        return ctx.drawBrickWall();\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(26, \"div\", 11)(27, \"label\", 4);\n      i0.ɵɵtext(28, \"\\u0428\\u0438\\u0440\\u0438\\u043D\\u0430 \\u043A\\u0438\\u0440\\u043F\\u0438\\u0447\\u0430, \\u043C\\u043C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"div\", 9)(30, \"input\", 14);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_30_listener($event) {\n        return ctx.brickWidthMM = $event;\n      })(\"change\", function HomeComponent_Template_input_change_30_listener() {\n        return ctx.drawBrickWall();\n      });\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(31, \"div\", 7)(32, \"div\", 8)(33, \"label\", 4);\n      i0.ɵɵtext(34, \"\\u0412\\u0435\\u0440\\u0442. \\u0448\\u043E\\u0432, \\u043C\\u043C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"div\", 9)(36, \"input\", 15);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_36_listener($event) {\n        return ctx.jointVerticalMM = $event;\n      })(\"change\", function HomeComponent_Template_input_change_36_listener() {\n        return ctx.drawBrickWall();\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(37, \"div\", 11)(38, \"label\", 4);\n      i0.ɵɵtext(39, \"\\u0413\\u043E\\u0440\\u0438\\u0437\\u043E\\u043D\\u0442. \\u0448\\u043E\\u0432, \\u043C\\u043C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(40, \"div\", 9)(41, \"input\", 15);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_41_listener($event) {\n        return ctx.jointHorizontalMM = $event;\n      })(\"change\", function HomeComponent_Template_input_change_41_listener() {\n        return ctx.drawBrickWall();\n      });\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(42, \"h4\", 16);\n      i0.ɵɵtext(43, \"\\u0420\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(44, \"div\", 17)(45, \"label\", 18);\n      i0.ɵɵtext(46, \"\\u0424\\u0430\\u043A\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0430\\u044F \\u0448\\u0438\\u0440\\u0438\\u043D\\u0430 \\u0441\\u0442\\u0435\\u043D\\u044B, \\u043C\\u043C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(47, \"label\", 19);\n      i0.ɵɵtext(48);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(49, \"div\", 17)(50, \"label\", 18);\n      i0.ɵɵtext(51, \"\\u0424\\u0430\\u043A\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0430\\u044F \\u0432\\u044B\\u0441\\u043E\\u0442\\u0430 \\u0441\\u0442\\u0435\\u043D\\u044B, \\u043C\\u043C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(52, \"label\", 19);\n      i0.ɵɵtext(53);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(54, \"div\", 17)(55, \"label\", 18);\n      i0.ɵɵtext(56, \"\\u041A\\u043E\\u043B-\\u0432\\u043E \\u043A\\u0440\\u0430\\u0441\\u043D\\u044B\\u0445 \\u043A\\u0438\\u0440\\u043F\\u0438\\u0447\\u0435\\u0439, \\u0448\\u0442/\\u043F\\u0430\\u043B\\u0435\\u0442\\u0442\\u044B\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(57, \"label\", 19);\n      i0.ɵɵtext(58);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(59, \"div\", 17)(60, \"label\", 18);\n      i0.ɵɵtext(61, \"\\u041A\\u043E\\u043B-\\u0432\\u043E \\u0436\\u0435\\u043B\\u0442\\u044B\\u0445 \\u043A\\u0438\\u0440\\u043F\\u0438\\u0447\\u0435\\u0439, \\u0448\\u0442/\\u043F\\u0430\\u043B\\u0435\\u0442\\u0442\\u044B\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(62, \"label\", 19);\n      i0.ɵɵtext(63);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(64, \"div\", 17)(65, \"label\", 18);\n      i0.ɵɵtext(66, \"\\u041E\\u0431\\u0449\\u0438\\u0439 \\u0432\\u0435\\u0441, \\u043A\\u0433\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(67, \"label\", 19);\n      i0.ɵɵtext(68);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(69, \"div\", 17)(70, \"label\", 18);\n      i0.ɵɵtext(71, \"\\u0418\\u0442\\u043E\\u0433\\u043E\\u0432\\u0430\\u044F \\u0446\\u0435\\u043D\\u0430, \\u0440\\u0443\\u0431\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(72, \"label\", 19);\n      i0.ɵɵtext(73);\n      i0.ɵɵpipe(74, \"currency\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(75, \"div\", 20)(76, \"div\", 21)(77, \"div\", 22);\n      i0.ɵɵtemplate(78, HomeComponent_div_78_Template, 2, 1, \"div\", 23);\n      i0.ɵɵpipe(79, \"reverse\");\n      i0.ɵɵelementEnd()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedBrickTypeId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.brickTypes);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.wallHeightInputMM);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.wallWidthInputMM);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.brickHeightMM);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.brickWidthMM);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.jointVerticalMM);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.jointHorizontalMM);\n      i0.ɵɵadvance(7);\n      i0.ɵɵtextInterpolate(ctx.wallWidthFactMM);\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate(ctx.wallHeightFactMM);\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate2(\"\", ctx.redBricksCount, \"/\", ctx.redPalletsCount, \"\");\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate2(\"\", ctx.yellowBricksCount, \"/\", ctx.yellowPalletsCount, \"\");\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate(ctx.totalWeight);\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind3(74, 17, ctx.totalCost, \"RUB\", \"symbol-narrow\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(79, 21, ctx.wallRows));\n    }\n  },\n  dependencies: [i3.NgForOf, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.MinValidator, i4.MaxValidator, i4.NgModel, i5.BrickDirective, i3.CurrencyPipe, i6.ReversePipe],\n  styles: [\"#wall[_ngcontent-%COMP%] {\\n  display: flex;\\n  padding-bottom: 20px;\\n}\\n\\n.rows[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  align-self: flex-end;\\n}\\n\\n.bricks-row[_ngcontent-%COMP%] {\\n  display: flex;\\n}\\n\\n.settings[_ngcontent-%COMP%] {\\n  min-width: 350px;\\n}\\n\\n.form-control[_ngcontent-%COMP%]:focus, .form-select[_ngcontent-%COMP%]:focus {\\n  box-shadow: 0 0 0 0.05rem rgba(13, 110, 253, 0.65) !important;\\n}\\n\\n.form-label[_ngcontent-%COMP%] {\\n  margin-bottom: 0.3rem;\\n  font-size: 14px;\\n  font-weight: 600;\\n  color: #0071b5;\\n}\\n\\n.header-text[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n  color: #d84646;\\n}\\n\\n.param-name[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  font-weight: 600;\\n  color: #0071b5;\\n  padding-top: 2px;\\n}\\n\\n.param-value[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhvbWUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0Esb0JBQUE7QUFDRjs7QUFFQTtFQUNFLHFCQUFBO0VBQ0Esb0JBQUE7QUFDRjs7QUFFQTtFQUNFLGFBQUE7QUFDRjs7QUFFQTtFQUNFLGdCQUFBO0FBQ0Y7O0FBRUE7O0VBRUUsNkRBQUE7QUFDRjs7QUFFQTtFQUNFLHFCQUFBO0VBQ0EsZUFBQTtFQUNBLGdCQUFBO0VBQ0EsY0FBQTtBQUNGOztBQUVBO0VBQ0UsZ0JBQUE7RUFDQSxjQUFBO0FBQ0Y7O0FBRUE7RUFDRSxlQUFBO0VBQ0EsZ0JBQUE7RUFDQSxjQUFBO0VBQ0EsZ0JBQUE7QUFDRjs7QUFFQTtFQUNFLGdCQUFBO0FBQ0YiLCJmaWxlIjoiaG9tZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiN3YWxsIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBhZGRpbmctYm90dG9tOiAyMHB4O1xyXG59XHJcblxyXG4ucm93cyB7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xyXG59XHJcblxyXG4uYnJpY2tzLXJvdyB7XHJcbiAgZGlzcGxheTogZmxleDtcclxufVxyXG5cclxuLnNldHRpbmdzIHtcclxuICBtaW4td2lkdGg6IDM1MHB4O1xyXG59XHJcblxyXG4uZm9ybS1jb250cm9sOmZvY3VzLFxyXG4uZm9ybS1zZWxlY3Q6Zm9jdXMge1xyXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMDVyZW0gcmdiYSgxMywgMTEwLCAyNTMsIDAuNjUpICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5mb3JtLWxhYmVsIHtcclxuICBtYXJnaW4tYm90dG9tOiAwLjNyZW07XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgY29sb3I6ICMwMDcxYjU7XHJcbn1cclxuXHJcbi5oZWFkZXItdGV4dCB7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICBjb2xvcjogI2Q4NDY0NjtcclxufVxyXG5cclxuLnBhcmFtLW5hbWUge1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG4gIGNvbG9yOiAjMDA3MWI1O1xyXG4gIHBhZGRpbmctdG9wOiAycHg7XHJcbn1cclxuXHJcbi5wYXJhbS12YWx1ZSB7XHJcbiAgZm9udC13ZWlnaHQ6IDYwMDtcclxufVxyXG4iXX0= */\"]\n});","map":{"version":3,"mappings":"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","names":["BrickModel","WallRow","lastValueFrom","color","i0","HomeComponent","constructor","brickTypeService","brickOptionService","Math","floor","brickWidthMM","jointVerticalMM","ngOnInit","brickTypes$","get","brickTypes","selectedBrickTypeId","id","updateBrickParams","drawBrickWall","wallRows","length","wallElement","document","getElementById","wallHeightScreen","offsetHeight","wallWidthScreen","offsetWidth","rowsCount","wallHeightInputMM","brickHeightMM","jointHorizontalMM","wallWidthFactMM","calculateWallWidth","widthFactor","heightFactor","wallWidthInputMM","brickWidthPX","jointVerticalPX","wallWidthPX","brickHeightPX","jointHorizontalPX","wallHeightPX","wallHeightFactMM","firstRowWidthPX","firstRowWidthMM","rowNum","isEvenRow","brickNum","laidOutPX","laidOutMM","wallRow","brick","heightPX","widthPX","halfBrickWidthMM","widthMM","marginLeft","marginBottom","backgroundColor","red","bricks","push","bricksOnRowCount","i","yellow","updateTotalResults","bricksOnRowCountODD","wallWidthODD","partialBrickWidthODD","minBrickWidth","bricksOnRowCountEVEN","wallWidthEVEN","partialBrickWidthEVEN","brickTypeChanged","brickOption$","brickOption","height","width","brickWeight","weight","brickPrice","price","countOnPalette","yellowBricksCount","redBricksCount","partialYellowBricks","partialRedBricks","forEach","array","partBrickIndex","findIndex","x","splice","redPalletsCount","ceil","yellowPalletsCount","totalWeight","totalCost","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Projects\\BrickWall\\ClientApp\\src\\app\\home\\home.component.ts","C:\\Projects\\BrickWall\\ClientApp\\src\\app\\home\\home.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { BrickModel, WallRow, BrickType, BrickOption } from '../models/brick.model';\r\nimport { OnInit } from '@angular/core';\r\nimport { BrickTypeService } from '../services/brick-type.service';\r\nimport { BrickOptionService } from '../services/brick-option.service';\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { color } from '../constants/color';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent {\r\n  constructor(private brickTypeService: BrickTypeService, private brickOptionService: BrickOptionService) {}\r\n\r\n  wallRows: WallRow[] = [];\r\n  brickTypes: BrickType[] = [];\r\n  selectedBrickTypeId: number;\r\n  brickOption: BrickOption;\r\n\r\n  //Вводные параметры в мм\r\n  wallHeightInputMM = 1000; //высота стены 3 метра\r\n  wallWidthInputMM = 3000; //длина стены 10 метров\r\n  brickHeightMM = 65; //высота кирпича 6,5 см\r\n  brickWidthMM = 250; //длина кирпича 25 см\r\n  jointVerticalMM = 10; //ширина веритикального шва 10 мм\r\n  jointHorizontalMM = 10; //ширина горизонтального шва 10 мм\r\n  halfBrickWidthMM = Math.floor(this.brickWidthMM / 2) - Math.floor(this.jointVerticalMM / 2); //Половина длинны кирпича\r\n  minBrickWidth = 30; //минимальная длина обрезка кирпича\r\n  brickWeight = 0; //вес кирпича\r\n  brickPrice = 0; //цена кирпича\r\n  countOnPalette = 0; //кол-во кирпичей на одной палетте\r\n\r\n  //Результат\r\n  wallWidthFactMM: number;\r\n  wallHeightFactMM: number;\r\n  yellowBricksCount: number;\r\n  redBricksCount: number;\r\n  yellowPalletsCount: number;\r\n  redPalletsCount: number;\r\n  totalWeight: number;\r\n  totalCost: number;\r\n\r\n  async ngOnInit() {\r\n    const brickTypes$ = this.brickTypeService.get();\r\n    this.brickTypes = await lastValueFrom(brickTypes$);\r\n    this.selectedBrickTypeId = this.brickTypes[0].id;\r\n    this.updateBrickParams();\r\n  }\r\n\r\n  //Нарисовать стену\r\n  drawBrickWall() {\r\n    this.wallRows.length = 0;\r\n    const wallElement = document.getElementById('wall');\r\n\r\n    //Визуальные параметры стены в пикселях\r\n    const wallHeightScreen = wallElement?.offsetHeight;\r\n    const wallWidthScreen = wallElement?.offsetWidth;\r\n\r\n    if (wallWidthScreen && wallHeightScreen) {\r\n      //Рассчитываем количество рядов\r\n      let rowsCount = Math.floor(this.wallHeightInputMM / (this.brickHeightMM + this.jointHorizontalMM));\r\n\r\n      //Реальная длина стены может быть меньше, чем ввел пользователь. Например, если кирпич 250, шов 10, а пользователь указал длину стены 261\r\n      //В этом случае неполный кирпич должен быть длиной 1мм, что практически невозможно реализовать\r\n      //Поэтому берем минимильную длину обрезка равную 30мм и рассчитываем реальную длину стены\r\n      this.wallWidthFactMM = this.calculateWallWidth();\r\n\r\n      //Коээфициент для первода ширины мм в px\r\n      const widthFactor = wallWidthScreen / this.wallWidthFactMM;\r\n      //Коээфициент для первода высоты мм в px\r\n      const heightFactor = wallHeightScreen / this.wallWidthInputMM;\r\n\r\n      //Ширина одного кирпича в пикселях\r\n      const brickWidthPX = Math.floor(this.brickWidthMM * widthFactor);\r\n      //Ширина шва в пикселях. Может быть 0, если стена слишком широкая\r\n      const jointVerticalPX = Math.floor(this.jointVerticalMM * widthFactor);\r\n      //Ширина стены в px\r\n      let wallWidthPX = this.wallWidthFactMM * widthFactor;\r\n\r\n      //Высота одного кирпича в пикселях\r\n      const brickHeightPX = Math.floor(this.brickHeightMM * widthFactor);\r\n      //Высота шва в пикселях\r\n      const jointHorizontalPX = Math.floor(this.jointHorizontalMM * widthFactor);\r\n      //Высота стены в px\r\n      let wallHeightPX = this.wallWidthInputMM * widthFactor;\r\n      //Высота стены в мм\r\n      this.wallHeightFactMM = rowsCount * this.brickHeightMM + rowsCount * this.jointHorizontalMM;\r\n\r\n      //Ширина первого ряда в px. Будем выравнивать четные ряды по этому значению\r\n      let firstRowWidthPX = 0;\r\n      let firstRowWidthMM = 0;\r\n\r\n      //Цикл по количеству рядов стены\r\n      for (let rowNum = 1; rowNum <= rowsCount; rowNum++) {\r\n        let isEvenRow = rowNum % 2 == 0;\r\n        let brickNum = 0;\r\n        let laidOutPX = 0; //Сколько уложено кирпичей и швов в пикселях\r\n        let laidOutMM = 0; //Сколько уложено кирпичей и швов в мм\r\n        let wallRow = new WallRow();\r\n\r\n        //ЛЕВАЯ ЧАСТЬ. Для четных рядов первым идет половина кирпича\r\n        if (isEvenRow) {\r\n          let brick = new BrickModel();\r\n          brick.heightPX = brickHeightPX;\r\n          brick.widthPX = Math.floor(this.halfBrickWidthMM * widthFactor);\r\n          brick.widthMM = this.halfBrickWidthMM;\r\n          brick.marginLeft = 0;\r\n          brick.marginBottom = jointHorizontalPX;\r\n          brick.backgroundColor = color.red;\r\n          wallRow.bricks.push(brick);\r\n          brickNum++;\r\n          laidOutPX += brick.widthPX;\r\n          laidOutMM += this.halfBrickWidthMM;\r\n        }\r\n\r\n        //ЦЕНТР. Количество целых кирпичей для одного ряда с учетом швов между кирпичами\r\n        let bricksOnRowCount = isEvenRow\r\n          ? Math.floor((this.wallWidthFactMM - this.halfBrickWidthMM) / (this.brickWidthMM + this.jointVerticalMM))\r\n          : Math.floor((this.wallWidthFactMM + this.jointVerticalMM) / (this.brickWidthMM + this.jointVerticalMM));\r\n\r\n        for (let i = 0; i < bricksOnRowCount; i++) {\r\n          let brick = new BrickModel();\r\n          brick.heightPX = brickHeightPX;\r\n          brick.widthPX = brickWidthPX;\r\n          brick.widthMM = this.brickWidthMM;\r\n          brick.marginLeft = wallRow.bricks.length == 0 ? 0 : jointVerticalPX;\r\n          brick.marginBottom = jointHorizontalPX;\r\n          brick.backgroundColor = brickNum % 2 == 0 ? color.red : color.yellow;\r\n          wallRow.bricks.push(brick);\r\n          brickNum++;\r\n          laidOutPX += brick.widthPX + brick.marginLeft;\r\n          laidOutMM += this.brickWidthMM + this.jointVerticalMM;\r\n\r\n          //Если это последний блок и не будет неполного кирпича, то подкорректируем ширину\r\n          if (i == bricksOnRowCount - 1 && this.wallWidthFactMM - laidOutMM == 0) {\r\n            brick.widthPX += firstRowWidthPX - laidOutPX;\r\n          }\r\n        }\r\n\r\n        //ПРАВАЯ ЧАСТЬ. Добавляем неполный кирпич справа\r\n        if (this.wallWidthFactMM - laidOutMM > 0) {\r\n          let widthPX = 0;\r\n          let widthMM = 0;\r\n          //Последний в первом ряду рассчитываем как Остаток в мм * коэффициент\r\n          if (rowNum == 1) {\r\n            widthMM = this.wallWidthFactMM - laidOutMM - this.jointVerticalMM;\r\n            widthPX = widthMM * widthFactor;\r\n          }\r\n          //Чтобы округление нас не расстраивало будем исходить из нарисованной длины первого ряда в пикселях (firstRowWidthPX)\r\n          else {\r\n            widthMM = laidOutMM ? firstRowWidthMM - laidOutMM - this.jointVerticalMM : firstRowWidthMM;\r\n            widthPX = laidOutPX ? firstRowWidthPX - laidOutPX - jointVerticalPX : firstRowWidthPX;\r\n          }\r\n\r\n          let brick = new BrickModel();\r\n          brick.heightPX = brickHeightPX;\r\n          brick.widthPX = widthPX;\r\n          brick.widthMM = widthMM;\r\n          brick.marginLeft = jointVerticalPX;\r\n          brick.marginBottom = jointHorizontalPX;\r\n          brick.backgroundColor = brickNum % 2 == 0 ? color.red : color.yellow;\r\n          wallRow.bricks.push(brick);\r\n          laidOutPX += brick.widthPX + brick.marginLeft;\r\n          laidOutMM += brick.widthMM + this.jointVerticalMM;\r\n        }\r\n\r\n        //Запоминаем ширину первого ряда в пикселях, чтобы последний неполный кирпич в четных рядах корректировать по этой длинне (борьба с округлением)\r\n        if (rowNum == 1) {\r\n          firstRowWidthPX = laidOutPX;\r\n          firstRowWidthMM = laidOutMM;\r\n        }\r\n\r\n        this.wallRows.push(wallRow);\r\n      }\r\n    }\r\n\r\n    //Пересчитываем результаты\r\n    this.updateTotalResults();\r\n  }\r\n\r\n  //Расчет реальной длины стены. Может быть равна или меньше, чем значение, которое указал пользователь\r\n  calculateWallWidth() {\r\n    //Количество целых кирпичей для одного ряда с учетом швов между кирпичами. Считаем по первому ряду, где первым идет полный кирпич\r\n    let bricksOnRowCountODD = Math.floor((this.wallWidthInputMM + this.jointVerticalMM) / (this.brickWidthMM + this.jointVerticalMM));\r\n    //Длина стены в мм. Она либо равна, либо чуть меньше заданной пользователем ширины стены\r\n    let wallWidthODD = (this.brickWidthMM + this.jointVerticalMM) * bricksOnRowCountODD - this.jointVerticalMM;\r\n    //Рассчитаем остаток (неполный кирпич) у проверим: если он меньше допустимой длинны, то уменьшим длину стены\r\n    const partialBrickWidthODD = this.wallWidthInputMM - wallWidthODD - this.jointVerticalMM;\r\n    if (partialBrickWidthODD < this.minBrickWidth || partialBrickWidthODD <= 0) {\r\n      //Остаток меньше нормы. Возвращаем рассчитанное значение длины стены\r\n      return wallWidthODD;\r\n    } else {\r\n      let bricksOnRowCountEVEN = Math.floor((this.wallWidthInputMM - this.halfBrickWidthMM) / (this.brickWidthMM + this.jointVerticalMM));\r\n      let wallWidthEVEN = (this.brickWidthMM + this.jointVerticalMM) * bricksOnRowCountEVEN + this.halfBrickWidthMM;\r\n      const partialBrickWidthEVEN = this.wallWidthInputMM - wallWidthEVEN - this.jointVerticalMM;\r\n      if (partialBrickWidthEVEN < this.minBrickWidth || partialBrickWidthEVEN <= 0) {\r\n        //Остаток меньше нормы. Возвращаем рассчитанное значение длины стены\r\n        return wallWidthEVEN;\r\n      } else {\r\n        //Остаток в норме. Возвращаем исходную длину стены, которую указал пользователь\r\n        return this.wallWidthInputMM;\r\n      }\r\n    }\r\n  }\r\n\r\n  //При изменеии типа кирпича получим с сервера данные по выбранному кирпичу\r\n  brickTypeChanged() {\r\n    this.updateBrickParams();\r\n  }\r\n\r\n  //Получаем параметры выбранного типа кирпича с сервера\r\n  async updateBrickParams() {\r\n    const brickOption$ = this.brickOptionService.get(this.selectedBrickTypeId);\r\n    this.brickOption = await lastValueFrom(brickOption$);\r\n\r\n    this.brickHeightMM = this.brickOption.height;\r\n    this.brickWidthMM = this.brickOption.width;\r\n    this.brickWeight = this.brickOption.weight;\r\n    this.brickPrice = this.brickOption.price;\r\n    this.countOnPalette = this.brickOption.countOnPalette;\r\n    this.halfBrickWidthMM = Math.floor(this.brickWidthMM / 2) - Math.floor(this.jointVerticalMM / 2);\r\n\r\n    this.drawBrickWall();\r\n  }\r\n\r\n  //Обновляем результаты после построения стены\r\n  updateTotalResults() {\r\n    this.yellowBricksCount = 0;\r\n    this.redBricksCount = 0;\r\n    //Массивы для хранения остатов кирпичей\r\n    let partialYellowBricks: number[] = [];\r\n    let partialRedBricks: number[] = [];\r\n\r\n    this.wallRows.forEach((wallRow) => {\r\n      wallRow.bricks.forEach((brick) => {\r\n        //Нужен целый кирпич\r\n        if (brick.widthMM == this.brickWidthMM) {\r\n          this.redBricksCount += brick.backgroundColor == color.red ? 1 : 0;\r\n          this.yellowBricksCount += brick.backgroundColor == color.yellow ? 1 : 0;\r\n        }\r\n        //Часть кирпича. Поищем в имеющихся остатках\r\n        else {\r\n          var array = brick.backgroundColor == color.red ? partialRedBricks : partialYellowBricks;\r\n          let partBrickIndex = array.findIndex((x) => x >= brick.widthMM);\r\n          if (partBrickIndex >= 0) {\r\n            //Убираем из остатков\r\n            array.splice(partBrickIndex, 1);\r\n          }\r\n          //В остатках нет. Берем целый кирпич, ломаем (ширина шва 0), оставшуюся часть сохраняем в массив\r\n          else {\r\n            this.redBricksCount += brick.backgroundColor == color.red ? 1 : 0;\r\n            this.yellowBricksCount += brick.backgroundColor == color.yellow ? 1 : 0;\r\n            array.push(this.brickWidthMM - brick.widthMM);\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    //Кол-во паллет\r\n    this.redPalletsCount = this.redBricksCount == 0 ? 0 : Math.ceil(this.redBricksCount / this.countOnPalette);\r\n    this.yellowPalletsCount = this.yellowBricksCount == 0 ? 0 : Math.ceil(this.yellowBricksCount / this.countOnPalette);\r\n    //Общий вес\r\n    this.totalWeight = (this.redBricksCount + this.yellowBricksCount) * this.brickWeight;\r\n    //Итовая цена\r\n    this.totalCost = (this.redBricksCount + this.yellowBricksCount) * this.brickPrice;\r\n  }\r\n}\r\n","<div class=\"d-flex h-100\">\r\n  <!-- Настройка -->\r\n  <div class=\"p-2 settings\">\r\n    <!-- Входящие параметры -->\r\n    <h4 class=\"header-text\">Входящие параметры</h4>\r\n    <div class=\"mb-2\">\r\n      <label class=\"form-label\">Тип кирпича</label>\r\n      <select\r\n        [(ngModel)]=\"selectedBrickTypeId\"\r\n        class=\"form-select form-select-sm\"\r\n        (change)=\"brickTypeChanged()\"\r\n      >\r\n        <option *ngFor=\"let item of brickTypes\" [value]=\"item.id\">\r\n          {{ item.name }}\r\n        </option>\r\n      </select>\r\n    </div>\r\n    <div class=\"mb-2 d-flex\">\r\n      <div class=\"me-2 w-50\">\r\n        <label class=\"form-label\">Высота стены, мм</label>\r\n        <div class=\"input-group input-group-sm\">\r\n          <input\r\n            [(ngModel)]=\"wallHeightInputMM\"\r\n            (change)=\"drawBrickWall()\"\r\n            type=\"number\"\r\n            class=\"form-control\"\r\n            min=\"10\"\r\n            max=\"4000\"\r\n            placeholder=\"от 10 до 4000 мм\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"ms-2 w-50\">\r\n        <label class=\"form-label\">Ширина стены, мм</label>\r\n        <div class=\"input-group input-group-sm\">\r\n          <input\r\n            [(ngModel)]=\"wallWidthInputMM\"\r\n            (change)=\"drawBrickWall()\"\r\n            type=\"number\"\r\n            class=\"form-control\"\r\n            min=\"250\"\r\n            max=\"10000\"\r\n            placeholder=\"от 250 до 10000 мм\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"mb-2 d-flex\">\r\n      <div class=\"me-2 w-50\">\r\n        <label class=\"form-label\">Высота кирпича, мм</label>\r\n        <div class=\"input-group input-group-sm\">\r\n          <input\r\n            [(ngModel)]=\"brickHeightMM\"\r\n            (change)=\"drawBrickWall()\"\r\n            type=\"number\"\r\n            class=\"form-control\"\r\n            min=\"10\"\r\n            max=\"300\"\r\n            placeholder=\"от 10 до 300 мм\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"ms-2 w-50\">\r\n        <label class=\"form-label\">Ширина кирпича, мм</label>\r\n        <div class=\"input-group input-group-sm\">\r\n          <input\r\n            [(ngModel)]=\"brickWidthMM\"\r\n            (change)=\"drawBrickWall()\"\r\n            type=\"number\"\r\n            class=\"form-control\"\r\n            min=\"20\"\r\n            max=\"400\"\r\n            placeholder=\"от 20 до 400 мм\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"mb-2 d-flex\">\r\n      <div class=\"me-2 w-50\">\r\n        <label class=\"form-label\">Верт. шов, мм</label>\r\n        <div class=\"input-group input-group-sm\">\r\n          <input\r\n            [(ngModel)]=\"jointVerticalMM\"\r\n            (change)=\"drawBrickWall()\"\r\n            type=\"number\"\r\n            class=\"form-control\"\r\n            min=\"8\"\r\n            max=\"15\"\r\n            placeholder=\"от 8 до 15 мм\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"ms-2 w-50\">\r\n        <label class=\"form-label\">Горизонт. шов, мм</label>\r\n        <div class=\"input-group input-group-sm\">\r\n          <input\r\n            [(ngModel)]=\"jointHorizontalMM\"\r\n            (change)=\"drawBrickWall()\"\r\n            type=\"number\"\r\n            class=\"form-control\"\r\n            min=\"8\"\r\n            max=\"15\"\r\n            placeholder=\"от 8 до 15 мм\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- Результат-->\r\n    <h4 class=\"header-text pt-3\">Результат</h4>\r\n    <div class=\"d-flex justify-content-between pt-2\">\r\n      <label class=\"param-name\">Фактическая ширина стены, мм</label>\r\n      <label class=\"param-value\">{{ wallWidthFactMM }}</label>\r\n    </div>\r\n    <div class=\"d-flex justify-content-between pt-2\">\r\n      <label class=\"param-name\">Фактическая высота стены, мм</label>\r\n      <label class=\"param-value\">{{ wallHeightFactMM }}</label>\r\n    </div>\r\n    <div class=\"d-flex justify-content-between pt-2\">\r\n      <label class=\"param-name\">Кол-во красных кирпичей, шт/палетты</label>\r\n      <label class=\"param-value\"\r\n        >{{ redBricksCount }}/{{ redPalletsCount }}</label\r\n      >\r\n    </div>\r\n    <div class=\"d-flex justify-content-between pt-2\">\r\n      <label class=\"param-name\">Кол-во желтых кирпичей, шт/палетты</label>\r\n      <label class=\"param-value\"\r\n        >{{ yellowBricksCount }}/{{ yellowPalletsCount }}</label\r\n      >\r\n    </div>\r\n    <div class=\"d-flex justify-content-between pt-2\">\r\n      <label class=\"param-name\">Общий вес, кг</label>\r\n      <label class=\"param-value\">{{ totalWeight }}</label>\r\n    </div>\r\n    <div class=\"d-flex justify-content-between pt-2\">\r\n      <label class=\"param-name\">Итоговая цена, руб</label>\r\n      <label class=\"param-value\">{{\r\n        totalCost | currency : \"RUB\" : \"symbol-narrow\"\r\n      }}</label>\r\n    </div>\r\n  </div>\r\n  <!-- Кирпичная стена -->\r\n  <div class=\"p-2 w-100\">\r\n    <div id=\"wall\" class=\"h-100\">\r\n      <div class=\"rows\">\r\n        <div *ngFor=\"let wallRow of wallRows | reverse\" class=\"bricks-row\">\r\n          <div brick [entity]=\"item\" *ngFor=\"let item of wallRow.bricks\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module"}