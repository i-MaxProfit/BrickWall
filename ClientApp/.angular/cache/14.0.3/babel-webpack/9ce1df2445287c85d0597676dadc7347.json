{"ast":null,"code":"import _asyncToGenerator from \"C:/Projects/BrickWall/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BrickModel, WallRow } from '../models/brick.model';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/brick-type.service\";\nimport * as i2 from \"../services/brick-option.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../directives/brick.directive\";\nimport * as i6 from \"../pipes/reverse.pipe\";\n\nfunction HomeComponent_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", item_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r2.name, \" \");\n  }\n}\n\nfunction HomeComponent_div_43_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 22);\n  }\n\n  if (rf & 2) {\n    const item_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"entity\", item_r5);\n  }\n}\n\nfunction HomeComponent_div_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtemplate(1, HomeComponent_div_43_div_1_Template, 1, 1, \"div\", 21);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const wallRow_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", wallRow_r3.bricks);\n  }\n}\n\nexport class HomeComponent {\n  constructor(brickTypeService, brickOptionService) {\n    this.brickTypeService = brickTypeService;\n    this.brickOptionService = brickOptionService;\n    this.wallRows = [];\n    this.brickTypes = []; //Вводные параметры в мм\n\n    this.wallHeightInputMM = 1000; //высота стены 3 метра\n\n    this.wallWidthInputMM = 3000; //длина стены 10 метров\n\n    this.brickHeightMM = 65; //высота кирпича 6,5 см\n\n    this.brickWidthMM = 250; //длина кирпича 25 см\n\n    this.jointVerticalMM = 10; //ширина веритикального шва 10 мм\n\n    this.jointHorizontalMM = 10; //ширина горизонтального шва 10 мм\n\n    this.halfBrickWidthMM = Math.floor(this.brickWidthMM / 2) - Math.floor(this.jointVerticalMM / 2); //Половина длинны кирпича\n\n    this.minBrickWidth = 30; //минимальная длина обрезка кирпича\n\n    this.oddColor = '#e78120';\n    this.evenColor = '#f36868';\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const brickTypes$ = _this.brickTypeService.get();\n\n      _this.brickTypes = yield lastValueFrom(brickTypes$);\n      _this.selectedBrickTypeId = _this.brickTypes[0].id;\n    })();\n  }\n\n  updateBrickParams() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const brickOption$ = _this2.brickOptionService.get(_this2.selectedBrickTypeId);\n\n      _this2.brickOption = yield lastValueFrom(brickOption$);\n      console.log(_this2.brickOption);\n      _this2.brickHeightMM = _this2.brickOption.height;\n      _this2.brickWidthMM = _this2.brickOption.width;\n\n      _this2.drawBrickWall();\n    })();\n  } // Результат:\n  // Ширина стены\n  // Высота стены\n  // Количество красного кирпича\n  // Количество желтого кирпича\n  // Общий вес\n  // Цена\n  // Требуемое кол-во паллет\n\n\n  drawBrickWall() {\n    this.wallRows.length = 0;\n    const wallElement = document.getElementById('wall'); //Визуальные параметры стены в пикселях\n\n    const wallHeightScreen = wallElement === null || wallElement === void 0 ? void 0 : wallElement.offsetHeight;\n    const wallWidthScreen = wallElement === null || wallElement === void 0 ? void 0 : wallElement.offsetWidth;\n\n    if (wallWidthScreen && wallHeightScreen) {\n      //Рассчитываем количество рядов\n      let rowsCount = Math.floor(this.wallHeightInputMM / (this.brickHeightMM + this.jointHorizontalMM)); //Реальная длина стены может быть меньше, чем ввел пользователь. Например, если кирпич 250, шов 10, а пользователь указал длину стены 261\n      //В этом случае неполный кирпич должен быть длиной 1мм, что практически невозможно реализовать\n      //Поэтому берем минимильную длину обрезка равную 30мм и рассчитываем реальную длину стены\n\n      let wallWidthMM = this.calculateWallWidth(); //Коээфициент для первода ширины мм в px\n\n      const widthFactor = wallWidthScreen / wallWidthMM; //Коээфициент для первода высоты мм в px\n\n      const heightFactor = wallHeightScreen / this.wallWidthInputMM; //Ширина одного кирпича в пикселях\n\n      const brickWidthPX = Math.floor(this.brickWidthMM * widthFactor); //Ширина шва в пикселях. Может быть 0, если стена слишком широкая\n\n      const jointVerticalPX = Math.floor(this.jointVerticalMM * widthFactor); //Ширина стены в px\n\n      let wallWidthPX = wallWidthMM * widthFactor; //Высота одного кирпича в пикселях\n\n      const brickHeightPX = Math.floor(this.brickHeightMM * widthFactor); //Высота шва в пикселях\n\n      const jointHorizontalPX = Math.floor(this.jointHorizontalMM * widthFactor); //Высота стены в px\n\n      let wallHeightPX = this.wallWidthInputMM * widthFactor; //Ширина первого ряда в px. Будем выравнивать четные ряды по этому значению\n\n      let firstRowWidthPX = 0; //Цикл по количеству рядов стены\n\n      for (let rowNum = 1; rowNum <= rowsCount; rowNum++) {\n        let isEvenRow = rowNum % 2 == 0;\n        let brickNum = 0;\n        let laidOutPX = 0; //Сколько уложено кирпичей и швов в пикселях\n\n        let laidOutMM = 0; //Сколько уложено кирпичей и швов в мм\n\n        let wallRow = new WallRow(); //ЛЕВАЯ ЧАСТЬ. Для четных рядов первым идет половина кирпича\n\n        if (isEvenRow) {\n          let brick = new BrickModel();\n          brick.height = brickHeightPX;\n          brick.width = Math.floor(this.halfBrickWidthMM * widthFactor);\n          brick.marginLeft = 0;\n          brick.marginBottom = jointHorizontalPX;\n          brick.backgroundColor = this.evenColor;\n          wallRow.bricks.push(brick);\n          brickNum++;\n          laidOutPX += brick.width;\n          laidOutMM += this.halfBrickWidthMM;\n        } //ЦЕНТР. Количество целых кирпичей для одного ряда с учетом швов между кирпичами\n\n\n        let bricksOnRowCount = isEvenRow ? Math.floor((wallWidthMM - this.halfBrickWidthMM) / (this.brickWidthMM + this.jointVerticalMM)) : Math.floor((wallWidthMM + this.jointVerticalMM) / (this.brickWidthMM + this.jointVerticalMM));\n\n        for (let i = 0; i < bricksOnRowCount; i++) {\n          let brick = new BrickModel();\n          brick.height = brickHeightPX;\n          brick.width = brickWidthPX;\n          brick.marginLeft = wallRow.bricks.length == 0 ? 0 : jointVerticalPX;\n          brick.marginBottom = jointHorizontalPX;\n          brick.backgroundColor = brickNum % 2 == 0 ? this.evenColor : this.oddColor;\n          wallRow.bricks.push(brick);\n          brickNum++;\n          laidOutPX += brick.width + brick.marginLeft;\n          laidOutMM += this.brickWidthMM + this.jointVerticalMM; //Если это последний блок и не будет неполного кирпича, то подкорректируем ширину\n\n          if (i == bricksOnRowCount - 1 && wallWidthMM - laidOutMM == 0) {\n            brick.width += firstRowWidthPX - laidOutPX;\n          }\n        } //ПРАВАЯ ЧАСТЬ. Добавляем неполный кирпич справа\n\n\n        if (wallWidthMM - laidOutMM > 0) {\n          let width = 0; //Последний в первом ряду рассчитываем как Остаток в мм * коэффициент\n\n          if (rowNum == 1) {\n            width = (wallWidthMM - laidOutMM - this.jointVerticalMM) * widthFactor;\n          } //Чтобы округление нас не расстраивало будем исходить из нарисованной длины первого ряда в пикселях (firstRowWidthPX)\n          else {\n            width = laidOutPX ? firstRowWidthPX - laidOutPX - jointVerticalPX : firstRowWidthPX;\n          }\n\n          let brick = new BrickModel();\n          brick.height = brickHeightPX;\n          brick.width = width;\n          brick.marginLeft = jointVerticalPX;\n          brick.marginBottom = jointHorizontalPX;\n          brick.backgroundColor = brickNum % 2 == 0 ? this.evenColor : this.oddColor;\n          wallRow.bricks.push(brick);\n          laidOutPX += brick.width + brick.marginLeft;\n        } //Запоминаем ширину первого ряда в пикселях, чтобы последний неполный кирпич в четных рядах корректировать по этой длинне (борьба с округлением)\n\n\n        if (rowNum == 1) {\n          firstRowWidthPX = laidOutPX;\n        }\n\n        this.wallRows.push(wallRow);\n      }\n    }\n  }\n\n  calculateWallWidth() {\n    //Количество целых кирпичей для одного ряда с учетом швов между кирпичами. Считаем по первому ряду, где первым идет полный кирпич\n    let bricksOnRowCountODD = Math.floor((this.wallWidthInputMM + this.jointVerticalMM) / (this.brickWidthMM + this.jointVerticalMM)); //Длина стены в мм. Она либо равна, либо чуть меньше заданной пользователем ширины стены\n\n    let wallWidthODD = (this.brickWidthMM + this.jointVerticalMM) * bricksOnRowCountODD - this.jointVerticalMM; //Рассчитаем остаток (неполный кирпич) у проверим: если он меньше допустимой длинны, то уменьшим длину стены\n\n    const partialBrickWidthODD = this.wallWidthInputMM - wallWidthODD - this.jointVerticalMM;\n\n    if (partialBrickWidthODD < this.minBrickWidth || partialBrickWidthODD <= 0) {\n      //Остаток меньше нормы. Возвращаем рассчитанное значение длины стены\n      return wallWidthODD;\n    } else {\n      let bricksOnRowCountEVEN = Math.floor((this.wallWidthInputMM - this.halfBrickWidthMM) / (this.brickWidthMM + this.jointVerticalMM));\n      let wallWidthEVEN = (this.brickWidthMM + this.jointVerticalMM) * bricksOnRowCountEVEN + this.halfBrickWidthMM;\n      const partialBrickWidthEVEN = this.wallWidthInputMM - wallWidthEVEN - this.jointVerticalMM;\n\n      if (partialBrickWidthEVEN < this.minBrickWidth || partialBrickWidthEVEN <= 0) {\n        //Остаток меньше нормы. Возвращаем рассчитанное значение длины стены\n        return wallWidthEVEN;\n      } else {\n        //Остаток в норме. Возвращаем исходную длину стены, которую указал пользователь\n        return this.wallWidthInputMM;\n      }\n    }\n  }\n\n  brickTypeChanged() {\n    console.log(this.selectedBrickTypeId);\n    this.updateBrickParams();\n  }\n\n}\n\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.BrickTypeService), i0.ɵɵdirectiveInject(i2.BrickOptionService));\n};\n\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 45,\n  vars: 11,\n  consts: [[1, \"d-flex\", \"h-100\"], [1, \"p-2\", \"settings\"], [1, \"mb-2\"], [1, \"form-label\"], [\"aria-label\", \"Default select example\", 1, \"form-select\", \"form-select-sm\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"mb-2\", \"d-flex\"], [1, \"me-2\", \"w-50\"], [1, \"input-group\", \"input-group-sm\"], [\"type\", \"number\", \"min\", \"10\", \"max\", \"4000\", \"placeholder\", \"\\u043E\\u0442 10 \\u0434\\u043E 4000 \\u043C\\u043C\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [1, \"ms-2\", \"w-50\"], [\"type\", \"number\", \"min\", \"250\", \"max\", \"10000\", \"placeholder\", \"\\u043E\\u0442 250 \\u0434\\u043E 10000 \\u043C\\u043C\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"type\", \"number\", \"min\", \"10\", \"max\", \"300\", \"placeholder\", \"\\u043E\\u0442 10 \\u0434\\u043E 300 \\u043C\\u043C\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"type\", \"number\", \"min\", \"20\", \"max\", \"400\", \"placeholder\", \"\\u043E\\u0442 20 \\u0434\\u043E 400 \\u043C\\u043C\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"type\", \"number\", \"min\", \"8\", \"max\", \"15\", \"placeholder\", \"\\u043E\\u0442 8 \\u0434\\u043E 15 \\u043C\\u043C\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [1, \"p-2\", \"w-100\"], [\"id\", \"wall\", 1, \"h-100\"], [1, \"rows\"], [\"class\", \"bricks-row\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"bricks-row\"], [\"brick\", \"\", 3, \"entity\", 4, \"ngFor\", \"ngForOf\"], [\"brick\", \"\", 3, \"entity\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"label\", 3);\n      i0.ɵɵtext(4, \"\\u0422\\u0438\\u043F \\u043A\\u0438\\u0440\\u043F\\u0438\\u0447\\u0430\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"select\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_select_ngModelChange_5_listener($event) {\n        return ctx.selectedBrickTypeId = $event;\n      })(\"change\", function HomeComponent_Template_select_change_5_listener() {\n        return ctx.brickTypeChanged();\n      });\n      i0.ɵɵtemplate(6, HomeComponent_option_6_Template, 2, 2, \"option\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 6)(8, \"div\", 7)(9, \"label\", 3);\n      i0.ɵɵtext(10, \"\\u0412\\u044B\\u0441\\u043E\\u0442\\u0430 \\u0441\\u0442\\u0435\\u043D\\u044B, \\u043C\\u043C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 8)(12, \"input\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_12_listener($event) {\n        return ctx.wallHeightInputMM = $event;\n      })(\"change\", function HomeComponent_Template_input_change_12_listener() {\n        return ctx.drawBrickWall();\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(13, \"div\", 10)(14, \"label\", 3);\n      i0.ɵɵtext(15, \"\\u0428\\u0438\\u0440\\u0438\\u043D\\u0430 \\u0441\\u0442\\u0435\\u043D\\u044B, \\u043C\\u043C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 8)(17, \"input\", 11);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_17_listener($event) {\n        return ctx.wallWidthInputMM = $event;\n      })(\"change\", function HomeComponent_Template_input_change_17_listener() {\n        return ctx.drawBrickWall();\n      });\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(18, \"div\", 6)(19, \"div\", 7)(20, \"label\", 3);\n      i0.ɵɵtext(21, \"\\u0412\\u044B\\u0441\\u043E\\u0442\\u0430 \\u043A\\u0438\\u0440\\u043F\\u0438\\u0447\\u0430, \\u043C\\u043C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"div\", 8)(23, \"input\", 12);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_23_listener($event) {\n        return ctx.brickHeightMM = $event;\n      })(\"change\", function HomeComponent_Template_input_change_23_listener() {\n        return ctx.drawBrickWall();\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(24, \"div\", 10)(25, \"label\", 3);\n      i0.ɵɵtext(26, \"\\u0428\\u0438\\u0440\\u0438\\u043D\\u0430 \\u043A\\u0438\\u0440\\u043F\\u0438\\u0447\\u0430, \\u043C\\u043C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"div\", 8)(28, \"input\", 13);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_28_listener($event) {\n        return ctx.brickWidthMM = $event;\n      })(\"change\", function HomeComponent_Template_input_change_28_listener() {\n        return ctx.drawBrickWall();\n      });\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(29, \"div\", 6)(30, \"div\", 7)(31, \"label\", 3);\n      i0.ɵɵtext(32, \"\\u0412\\u0435\\u0440\\u0442. \\u0448\\u043E\\u0432, \\u043C\\u043C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"div\", 8)(34, \"input\", 14);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_34_listener($event) {\n        return ctx.jointVerticalMM = $event;\n      })(\"change\", function HomeComponent_Template_input_change_34_listener() {\n        return ctx.drawBrickWall();\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(35, \"div\", 10)(36, \"label\", 3);\n      i0.ɵɵtext(37, \"\\u0413\\u043E\\u0440\\u0438\\u0437\\u043E\\u043D\\u0442. \\u0448\\u043E\\u0432, \\u043C\\u043C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(38, \"div\", 8)(39, \"input\", 14);\n      i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_Template_input_ngModelChange_39_listener($event) {\n        return ctx.jointHorizontalMM = $event;\n      })(\"change\", function HomeComponent_Template_input_change_39_listener() {\n        return ctx.drawBrickWall();\n      });\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(40, \"div\", 15)(41, \"div\", 16)(42, \"div\", 17);\n      i0.ɵɵtemplate(43, HomeComponent_div_43_Template, 2, 1, \"div\", 18);\n      i0.ɵɵpipe(44, \"reverse\");\n      i0.ɵɵelementEnd()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedBrickTypeId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.brickTypes);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.wallHeightInputMM);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.wallWidthInputMM);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.brickHeightMM);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.brickWidthMM);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.jointVerticalMM);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.jointHorizontalMM);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(44, 9, ctx.wallRows));\n    }\n  },\n  dependencies: [i3.NgForOf, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.MinValidator, i4.MaxValidator, i4.NgModel, i5.BrickDirective, i6.ReversePipe],\n  styles: [\"#wall[_ngcontent-%COMP%] {\\n  display: flex;\\n  padding-bottom: 20px;\\n}\\n\\n.rows[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  align-self: flex-end;\\n}\\n\\n.bricks-row[_ngcontent-%COMP%] {\\n  display: flex;\\n}\\n\\n.settings[_ngcontent-%COMP%] {\\n  min-width: 350px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhvbWUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0Esb0JBQUE7QUFDRjs7QUFFQTtFQUNFLHFCQUFBO0VBQ0Esb0JBQUE7QUFDRjs7QUFFQTtFQUNFLGFBQUE7QUFDRjs7QUFFQTtFQUNFLGdCQUFBO0FBQ0YiLCJmaWxlIjoiaG9tZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiN3YWxsIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBhZGRpbmctYm90dG9tOiAyMHB4O1xyXG59XHJcblxyXG4ucm93cyB7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xyXG59XHJcblxyXG4uYnJpY2tzLXJvdyB7XHJcbiAgZGlzcGxheTogZmxleDtcclxufVxyXG5cclxuLnNldHRpbmdzIHtcclxuICBtaW4td2lkdGg6IDM1MHB4O1xyXG59XHJcbiJdfQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["BrickModel","WallRow","lastValueFrom","i0","HomeComponent","constructor","brickTypeService","brickOptionService","Math","floor","brickWidthMM","jointVerticalMM","ngOnInit","brickTypes$","get","brickTypes","selectedBrickTypeId","id","updateBrickParams","brickOption$","brickOption","console","log","brickHeightMM","height","width","drawBrickWall","wallRows","length","wallElement","document","getElementById","wallHeightScreen","offsetHeight","wallWidthScreen","offsetWidth","rowsCount","wallHeightInputMM","jointHorizontalMM","wallWidthMM","calculateWallWidth","widthFactor","heightFactor","wallWidthInputMM","brickWidthPX","jointVerticalPX","wallWidthPX","brickHeightPX","jointHorizontalPX","wallHeightPX","firstRowWidthPX","rowNum","isEvenRow","brickNum","laidOutPX","laidOutMM","wallRow","brick","halfBrickWidthMM","marginLeft","marginBottom","backgroundColor","evenColor","bricks","push","bricksOnRowCount","i","oddColor","bricksOnRowCountODD","wallWidthODD","partialBrickWidthODD","minBrickWidth","bricksOnRowCountEVEN","wallWidthEVEN","partialBrickWidthEVEN","brickTypeChanged","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Projects\\BrickWall\\ClientApp\\src\\app\\home\\home.component.ts","C:\\Projects\\BrickWall\\ClientApp\\src\\app\\home\\home.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { BrickModel, WallRow, BrickType, BrickOption } from '../models/brick.model';\r\nimport { OnInit } from '@angular/core';\r\nimport { BrickTypeService } from '../services/brick-type.service';\r\nimport { BrickOptionService } from '../services/brick-option.service';\r\nimport { lastValueFrom } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent {\r\n  constructor(private brickTypeService: BrickTypeService, private brickOptionService: BrickOptionService) {}\r\n\r\n  wallRows: WallRow[] = [];\r\n  brickTypes: BrickType[] = [];\r\n  selectedBrickTypeId: number;\r\n  brickOption: BrickOption;\r\n\r\n  //Вводные параметры в мм\r\n  wallHeightInputMM = 1000; //высота стены 3 метра\r\n  wallWidthInputMM = 3000; //длина стены 10 метров\r\n  brickHeightMM = 65; //высота кирпича 6,5 см\r\n  brickWidthMM = 250; //длина кирпича 25 см\r\n  jointVerticalMM = 10; //ширина веритикального шва 10 мм\r\n  jointHorizontalMM = 10; //ширина горизонтального шва 10 мм\r\n  halfBrickWidthMM = Math.floor(this.brickWidthMM / 2) - Math.floor(this.jointVerticalMM / 2); //Половина длинны кирпича\r\n  minBrickWidth = 30; //минимальная длина обрезка кирпича\r\n\r\n  oddColor = '#e78120';\r\n  evenColor = '#f36868';\r\n\r\n  async ngOnInit() {\r\n    const brickTypes$ = this.brickTypeService.get();\r\n    this.brickTypes = await lastValueFrom(brickTypes$);\r\n\r\n    this.selectedBrickTypeId = this.brickTypes[0].id;\r\n  }\r\n\r\n  async updateBrickParams() {\r\n    const brickOption$ = this.brickOptionService.get(this.selectedBrickTypeId);\r\n    this.brickOption = await lastValueFrom(brickOption$);\r\n\r\n    console.log(this.brickOption);\r\n\r\n    this.brickHeightMM = this.brickOption.height;\r\n    this.brickWidthMM = this.brickOption.width;\r\n\r\n    this.drawBrickWall();\r\n  }\r\n\r\n  // Результат:\r\n  // Ширина стены\r\n  // Высота стены\r\n  // Количество красного кирпича\r\n  // Количество желтого кирпича\r\n  // Общий вес\r\n  // Цена\r\n  // Требуемое кол-во паллет\r\n\r\n  drawBrickWall() {\r\n    this.wallRows.length = 0;\r\n    const wallElement = document.getElementById('wall');\r\n\r\n    //Визуальные параметры стены в пикселях\r\n    const wallHeightScreen = wallElement?.offsetHeight;\r\n    const wallWidthScreen = wallElement?.offsetWidth;\r\n\r\n    if (wallWidthScreen && wallHeightScreen) {\r\n      //Рассчитываем количество рядов\r\n      let rowsCount = Math.floor(this.wallHeightInputMM / (this.brickHeightMM + this.jointHorizontalMM));\r\n\r\n      //Реальная длина стены может быть меньше, чем ввел пользователь. Например, если кирпич 250, шов 10, а пользователь указал длину стены 261\r\n      //В этом случае неполный кирпич должен быть длиной 1мм, что практически невозможно реализовать\r\n      //Поэтому берем минимильную длину обрезка равную 30мм и рассчитываем реальную длину стены\r\n      let wallWidthMM = this.calculateWallWidth();\r\n\r\n      //Коээфициент для первода ширины мм в px\r\n      const widthFactor = wallWidthScreen / wallWidthMM;\r\n      //Коээфициент для первода высоты мм в px\r\n      const heightFactor = wallHeightScreen / this.wallWidthInputMM;\r\n\r\n      //Ширина одного кирпича в пикселях\r\n      const brickWidthPX = Math.floor(this.brickWidthMM * widthFactor);\r\n      //Ширина шва в пикселях. Может быть 0, если стена слишком широкая\r\n      const jointVerticalPX = Math.floor(this.jointVerticalMM * widthFactor);\r\n      //Ширина стены в px\r\n      let wallWidthPX = wallWidthMM * widthFactor;\r\n\r\n      //Высота одного кирпича в пикселях\r\n      const brickHeightPX = Math.floor(this.brickHeightMM * widthFactor);\r\n      //Высота шва в пикселях\r\n      const jointHorizontalPX = Math.floor(this.jointHorizontalMM * widthFactor);\r\n      //Высота стены в px\r\n      let wallHeightPX = this.wallWidthInputMM * widthFactor;\r\n\r\n      //Ширина первого ряда в px. Будем выравнивать четные ряды по этому значению\r\n      let firstRowWidthPX = 0;\r\n\r\n      //Цикл по количеству рядов стены\r\n      for (let rowNum = 1; rowNum <= rowsCount; rowNum++) {\r\n        let isEvenRow = rowNum % 2 == 0;\r\n        let brickNum = 0;\r\n        let laidOutPX = 0; //Сколько уложено кирпичей и швов в пикселях\r\n        let laidOutMM = 0; //Сколько уложено кирпичей и швов в мм\r\n        let wallRow = new WallRow();\r\n\r\n        //ЛЕВАЯ ЧАСТЬ. Для четных рядов первым идет половина кирпича\r\n        if (isEvenRow) {\r\n          let brick = new BrickModel();\r\n          brick.height = brickHeightPX;\r\n          brick.width = Math.floor(this.halfBrickWidthMM * widthFactor);\r\n          brick.marginLeft = 0;\r\n          brick.marginBottom = jointHorizontalPX;\r\n          brick.backgroundColor = this.evenColor;\r\n          wallRow.bricks.push(brick);\r\n          brickNum++;\r\n          laidOutPX += brick.width;\r\n          laidOutMM += this.halfBrickWidthMM;\r\n        }\r\n\r\n        //ЦЕНТР. Количество целых кирпичей для одного ряда с учетом швов между кирпичами\r\n        let bricksOnRowCount = isEvenRow\r\n          ? Math.floor((wallWidthMM - this.halfBrickWidthMM) / (this.brickWidthMM + this.jointVerticalMM))\r\n          : Math.floor((wallWidthMM + this.jointVerticalMM) / (this.brickWidthMM + this.jointVerticalMM));\r\n\r\n        for (let i = 0; i < bricksOnRowCount; i++) {\r\n          let brick = new BrickModel();\r\n          brick.height = brickHeightPX;\r\n          brick.width = brickWidthPX;\r\n          brick.marginLeft = wallRow.bricks.length == 0 ? 0 : jointVerticalPX;\r\n          brick.marginBottom = jointHorizontalPX;\r\n          brick.backgroundColor = brickNum % 2 == 0 ? this.evenColor : this.oddColor;\r\n          wallRow.bricks.push(brick);\r\n          brickNum++;\r\n          laidOutPX += brick.width + brick.marginLeft;\r\n          laidOutMM += this.brickWidthMM + this.jointVerticalMM;\r\n\r\n          //Если это последний блок и не будет неполного кирпича, то подкорректируем ширину\r\n          if (i == bricksOnRowCount - 1 && wallWidthMM - laidOutMM == 0) {\r\n            brick.width += firstRowWidthPX - laidOutPX;\r\n          }\r\n        }\r\n\r\n        //ПРАВАЯ ЧАСТЬ. Добавляем неполный кирпич справа\r\n        if (wallWidthMM - laidOutMM > 0) {\r\n          let width = 0;\r\n          //Последний в первом ряду рассчитываем как Остаток в мм * коэффициент\r\n          if (rowNum == 1) {\r\n            width = (wallWidthMM - laidOutMM - this.jointVerticalMM) * widthFactor;\r\n          }\r\n          //Чтобы округление нас не расстраивало будем исходить из нарисованной длины первого ряда в пикселях (firstRowWidthPX)\r\n          else {\r\n            width = laidOutPX ? firstRowWidthPX - laidOutPX - jointVerticalPX : firstRowWidthPX;\r\n          }\r\n\r\n          let brick = new BrickModel();\r\n          brick.height = brickHeightPX;\r\n          brick.width = width;\r\n          brick.marginLeft = jointVerticalPX;\r\n          brick.marginBottom = jointHorizontalPX;\r\n          brick.backgroundColor = brickNum % 2 == 0 ? this.evenColor : this.oddColor;\r\n          wallRow.bricks.push(brick);\r\n          laidOutPX += brick.width + brick.marginLeft;\r\n        }\r\n\r\n        //Запоминаем ширину первого ряда в пикселях, чтобы последний неполный кирпич в четных рядах корректировать по этой длинне (борьба с округлением)\r\n        if (rowNum == 1) {\r\n          firstRowWidthPX = laidOutPX;\r\n        }\r\n\r\n        this.wallRows.push(wallRow);\r\n      }\r\n    }\r\n  }\r\n\r\n  calculateWallWidth() {\r\n    //Количество целых кирпичей для одного ряда с учетом швов между кирпичами. Считаем по первому ряду, где первым идет полный кирпич\r\n    let bricksOnRowCountODD = Math.floor((this.wallWidthInputMM + this.jointVerticalMM) / (this.brickWidthMM + this.jointVerticalMM));\r\n    //Длина стены в мм. Она либо равна, либо чуть меньше заданной пользователем ширины стены\r\n    let wallWidthODD = (this.brickWidthMM + this.jointVerticalMM) * bricksOnRowCountODD - this.jointVerticalMM;\r\n    //Рассчитаем остаток (неполный кирпич) у проверим: если он меньше допустимой длинны, то уменьшим длину стены\r\n    const partialBrickWidthODD = this.wallWidthInputMM - wallWidthODD - this.jointVerticalMM;\r\n    if (partialBrickWidthODD < this.minBrickWidth || partialBrickWidthODD <= 0) {\r\n      //Остаток меньше нормы. Возвращаем рассчитанное значение длины стены\r\n      return wallWidthODD;\r\n    } else {\r\n      let bricksOnRowCountEVEN = Math.floor((this.wallWidthInputMM - this.halfBrickWidthMM) / (this.brickWidthMM + this.jointVerticalMM));\r\n      let wallWidthEVEN = (this.brickWidthMM + this.jointVerticalMM) * bricksOnRowCountEVEN + this.halfBrickWidthMM;\r\n      const partialBrickWidthEVEN = this.wallWidthInputMM - wallWidthEVEN - this.jointVerticalMM;\r\n      if (partialBrickWidthEVEN < this.minBrickWidth || partialBrickWidthEVEN <= 0) {\r\n        //Остаток меньше нормы. Возвращаем рассчитанное значение длины стены\r\n        return wallWidthEVEN;\r\n      } else {\r\n        //Остаток в норме. Возвращаем исходную длину стены, которую указал пользователь\r\n        return this.wallWidthInputMM;\r\n      }\r\n    }\r\n  }\r\n\r\n  brickTypeChanged() {\r\n    console.log(this.selectedBrickTypeId);\r\n    this.updateBrickParams();\r\n  }\r\n}\r\n","<div class=\"d-flex h-100\">\r\n  <div class=\"p-2 settings\">\r\n    <div class=\"mb-2\">\r\n      <label class=\"form-label\">Тип кирпича</label>\r\n      <select\r\n        [(ngModel)]=\"selectedBrickTypeId\"\r\n        class=\"form-select form-select-sm\"\r\n        aria-label=\"Default select example\"\r\n        (change)=\"brickTypeChanged()\"\r\n      >\r\n        <option *ngFor=\"let item of brickTypes\" [value]=\"item.id\">\r\n          {{ item.name }}\r\n        </option>\r\n      </select>\r\n    </div>\r\n    <div class=\"mb-2 d-flex\">\r\n      <div class=\"me-2 w-50\">\r\n        <label class=\"form-label\">Высота стены, мм</label>\r\n        <div class=\"input-group input-group-sm\">\r\n          <input\r\n            [(ngModel)]=\"wallHeightInputMM\"\r\n            (change)=\"drawBrickWall()\"\r\n            type=\"number\"\r\n            class=\"form-control\"\r\n            min=\"10\"\r\n            max=\"4000\"\r\n            placeholder=\"от 10 до 4000 мм\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"ms-2 w-50\">\r\n        <label class=\"form-label\">Ширина стены, мм</label>\r\n        <div class=\"input-group input-group-sm\">\r\n          <input\r\n            [(ngModel)]=\"wallWidthInputMM\"\r\n            (change)=\"drawBrickWall()\"\r\n            type=\"number\"\r\n            class=\"form-control\"\r\n            min=\"250\"\r\n            max=\"10000\"\r\n            placeholder=\"от 250 до 10000 мм\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"mb-2 d-flex\">\r\n      <div class=\"me-2 w-50\">\r\n        <label class=\"form-label\">Высота кирпича, мм</label>\r\n        <div class=\"input-group input-group-sm\">\r\n          <input\r\n            [(ngModel)]=\"brickHeightMM\"\r\n            (change)=\"drawBrickWall()\"\r\n            type=\"number\"\r\n            class=\"form-control\"\r\n            min=\"10\"\r\n            max=\"300\"\r\n            placeholder=\"от 10 до 300 мм\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"ms-2 w-50\">\r\n        <label class=\"form-label\">Ширина кирпича, мм</label>\r\n        <div class=\"input-group input-group-sm\">\r\n          <input\r\n            [(ngModel)]=\"brickWidthMM\"\r\n            (change)=\"drawBrickWall()\"\r\n            type=\"number\"\r\n            class=\"form-control\"\r\n            min=\"20\"\r\n            max=\"400\"\r\n            placeholder=\"от 20 до 400 мм\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"mb-2 d-flex\">\r\n      <div class=\"me-2 w-50\">\r\n        <label class=\"form-label\">Верт. шов, мм</label>\r\n        <div class=\"input-group input-group-sm\">\r\n          <input\r\n            [(ngModel)]=\"jointVerticalMM\"\r\n            (change)=\"drawBrickWall()\"\r\n            type=\"number\"\r\n            class=\"form-control\"\r\n            min=\"8\"\r\n            max=\"15\"\r\n            placeholder=\"от 8 до 15 мм\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"ms-2 w-50\">\r\n        <label class=\"form-label\">Горизонт. шов, мм</label>\r\n        <div class=\"input-group input-group-sm\">\r\n          <input\r\n            [(ngModel)]=\"jointHorizontalMM\"\r\n            (change)=\"drawBrickWall()\"\r\n            type=\"number\"\r\n            class=\"form-control\"\r\n            min=\"8\"\r\n            max=\"15\"\r\n            placeholder=\"от 8 до 15 мм\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"p-2 w-100\">\r\n    <div id=\"wall\" class=\"h-100\">\r\n      <div class=\"rows\">\r\n        <div *ngFor=\"let wallRow of wallRows | reverse\" class=\"bricks-row\">\r\n          <div brick [entity]=\"item\" *ngFor=\"let item of wallRow.bricks\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module"}